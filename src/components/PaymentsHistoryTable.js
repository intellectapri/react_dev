import React from "react";
import moment from "moment";
import PropTypes from "prop-types";
import { connect } from "react-redux";

import Button from "@material-ui/core/Button";
import Table from "@material-ui/core/Table";
import TableHead from "@material-ui/core/TableHead";
import TableBody from "@material-ui/core/TableBody";
import TableRow from "@material-ui/core/TableRow";
import TableCell from "@material-ui/core/TableCell";
import Tooltip from "@material-ui/core/Tooltip";
import FormControlLabel from "@material-ui/core/FormControlLabel";
import Checkbox from "@material-ui/core/Checkbox";

import LoadingOverlay from "../components/LoadingOverlay";

import { requestPurchaseHistory } from "../actions/purchase";
import { updateChargeAction, deleteChargeAction } from "../actions/charges";

import config from "../config";

class PaymentsHistoryTable extends React.Component {
  constructor(props) {
    super(props);

    this.deleteCharge = this.deleteCharge.bind(this);
  }

  componentWillMount() {
    this.props.dispatch(requestPurchaseHistory(this.props.purchaseId));
  }

  deleteCharge(id) {
    if (confirm(`Delete charge?`)) {
      this.props.dispatch(deleteChargeAction(id, this.props.purchaseId));
    }
  }

  changeAccountingStatus(id, value) {
    if (confirm(`Change accounting status?`)) {
      this.props.dispatch(
        updateChargeAction(
          id,
          { addedToAccounting: value },
          this.props.purchaseId,
        ),
      );
    }
  }

  render() {
    let userIsAllowedToAddChargesToAccounting =
      this.props.user.groupCode ===
      config.userGroups[config.superUserGroupIndex].groupCode;

    let table = (
      <div style={{ textAlign: `center` }}>
        <p>No payments recorded</p>
      </div>
    );
    if (this.props.loading) {
      table = <LoadingOverlay />;
    } else if (
      this.props.historyData &&
      this.props.historyData.history.length > 0
    ) {
      let tableRows = [];
      this.props.historyData.history.map((item) => {
        let authorName = parseInt(item.addedStaff);
        this.props.users.map((user) => {
          if (parseInt(user.userId) === parseInt(item.addedStaff))
            authorName = `${user.firstname} ${user.lastname}`;
        });

        if (authorName === 0) {
          authorName = `Generated by system`;
        }

        let addedToAccountingName = item.addedToAccountingUpdatedBy
          ? parseInt(item.addedToAccountingUpdatedBy)
          : false;
        if (addedToAccountingName) {
          this.props.users.map((user) => {
            if (
              parseInt(user.userId) ===
              parseInt(item.addedToAccountingUpdatedBy)
            )
              addedToAccountingName = `${user.firstname} ${user.lastname}`;
          });
        }

        let addToAccountingControl = (
          <FormControlLabel
            control={
              <Checkbox
                disabled={!userIsAllowedToAddChargesToAccounting}
                checked={item.addedToAccounting ? true : false}
                onChange={(event) => {
                  this.changeAccountingStatus(
                    item.chargeID,
                    event.target.checked,
                  );
                }}
                value="checkedB"
                color="primary"
              />
            }
            label="Added"
          />
        );

        if (!userIsAllowedToAddChargesToAccounting) {
          addToAccountingControl = (
            <Tooltip
              title="You are not allowed to modify this property"
              placement="top"
            >
              {addToAccountingControl}
            </Tooltip>
          );
        }

        tableRows.push(
          <TableRow key={item.chargeID}>
            <TableCell>{item.chargeID}</TableCell>
            <TableCell>
              {moment(item.paymentDate.split("T")[0] + "T00:00:00").format(
                `D MMM YYYY`,
              )}
            </TableCell>
            <TableCell>{item.type}</TableCell>
            <TableCell>
              ${item.type === "refund" ? `-${item.amount}` : item.amount}
            </TableCell>
            <TableCell>{item.method}</TableCell>
            <TableCell>{item.refundReason}</TableCell>
            <TableCell>{item.internalNotes}</TableCell>
            <TableCell>
              {authorName ? (
                <div>
                  Added by: {authorName} at{" "}
                  {moment(item.addedTime).format(config.momentDateTimeFormat)}
                </div>
              ) : (
                false
              )}
              {addedToAccountingName ? (
                <div>
                  Accounting changed by: {addedToAccountingName} at{" "}
                  {moment(item.addedToAccountingUpdatedAt).format(
                    config.momentDateTimeFormat,
                  )}
                </div>
              ) : (
                false
              )}
            </TableCell>
            <TableCell>{addToAccountingControl}</TableCell>
            <TableCell>
              <Button
                size="small"
                variant="contained"
                onClick={() => {
                  this.deleteCharge(item.chargeID);
                }}
              >
                Delete
              </Button>
            </TableCell>
          </TableRow>,
        );
      });

      table = (
        <Table padding="dense">
          <TableHead>
            <TableRow>
              <TableCell>#</TableCell>
              <TableCell>Transaction date</TableCell>
              <TableCell>Type</TableCell>
              <TableCell>Amount</TableCell>
              <TableCell>Method</TableCell>
              <TableCell>Reasons</TableCell>
              <TableCell>Internal notes</TableCell>
              <TableCell>History</TableCell>
              <TableCell>Accounting</TableCell>
              <TableCell></TableCell>
            </TableRow>
          </TableHead>
          <TableBody>{tableRows}</TableBody>
        </Table>
      );
    }

    return <div>{table}</div>;
  }
}

PaymentsHistoryTable.propTypes = { purchaseId: PropTypes.number.isRequired };

function mapStateToProps(state) {
  const { purchaseReducer, chargeReducer, userReducer, auth } = state;
  const { deleteChargeLoading } = chargeReducer;
  const { purchaseHistory, purchaseHistoryLoading } = purchaseReducer;
  const { users } = userReducer;
  const { user } = auth;

  return {
    user,
    users,
    historyData: purchaseHistory,
    loading: purchaseHistoryLoading || deleteChargeLoading,
  };
}

export default connect(mapStateToProps)(PaymentsHistoryTable);
